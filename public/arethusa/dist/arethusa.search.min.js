/*
 * Arethusa - a backend-independent client-side annotation framework
 * http://github.com/alpheios-project/arethusa
 *
 * Version 0.2.5
 * built from branch gardener_widget
 * at 97c2531e63e0da7bfdf7e0e6a99ce7f99a4525a3
 * on 2020-03-30T18:03:20.458Z
 *
 * Published under the MIT license
 */

"use strict";angular.module("arethusa.search",[]),angular.module("arethusa.search").directive("pluginSearch",function(){return{restrict:"AE",scope:!0,replace:!0,link:function(a,b,c){a.plugin=a.$eval(c.pluginSearch),a.template="js/arethusa."+a.plugin.name+"/templates/search.html"},template:'<div ng-include="template"></div>'}}),angular.module("arethusa.search").directive("searchByString",["search","state","sidepanel",function(a,b,c){return{restrict:"A",scope:{},link:function(d,e,f){function g(b,c){var e=d.$new();e.token=b,e.$watch("token.string",function(d,e){d!==e&&(a.removeTokenFromIndex(b.id,e),a.collectTokenString(a.strings,c,b))}),i[c]=e}function h(){angular.forEach(b.tokens,g)}d.search=a,d.state=b;var i={};d.$watch("state.tokens",function(a,b){h()});var j=e.find("input")[0],k=e.parents("#sidepanel")[0];d.$watch("search.focusStringSearch",function(b,d){b&&(k&&c.folded&&c.toggle(),j.focus(),a.focusStringSearch=!1)})},templateUrl:"js/arethusa.search/templates/search_by_string.html"}}]),angular.module("arethusa.search").service("search",["state","configurator","keyCapture","plugins",function(a,b,c,d){function e(){var a=["queryByRegex"];b.getConfAndDelegate(o),b.getStickyConf(o,a),o.focusStringSearch=!1,o.greekRegex=c.conf("regex").greek}function f(b){var c=[],d={};return angular.forEach(o.strings,function(e,f){angular.forEach(e,function(e){if(!d[e]){var g=a.getPreviousTokens(e,1),h=a.getNextTokens(e,1),i=h.length>0?h[0].string:null,j=g.length>0?g[0].string:null,k=o.compareWordsWithContext(f,j,i,b);if(k.match){d[e]=1;var l={id:e};k.combine<0?(d[g[0].id]=1,l.includePrevious=g[0].id):k.combine>0&&(l.includeNext=h[0].id,d[h[0].id]=1),c.push(l)}}})}),c}function g(b,c){var d=0,e=k(c);if(e.length>0)for(var f=a.getPreviousTokens(b),g=f.length-1,h=e.length-1;h>=0;h--){var j=i(f,g);if(j.word){var l=o.compareWordsWithContext(j.word,j.prev,j.next,e[h]);l.match&&(g--,d++,l.combine<0&&(g+=l.combine))}}return d}function h(b,c){var d=0,e=k(c);if(e.length>0)for(var f=a.getNextTokens(b),g=0,h=0;h<f.length;h++){var j=i(f,g);if(j.word){var l=o.compareWordsWithContext(j.word,j.prev,j.next,e[h]);l.match&&(g++,d++,l.combine>0&&(g-=l.combine))}}return d}function i(a,b){var c={};return a[b]&&(c.word=a[b].string,c.next=a[b+1]?a[b+1].string:"",c.prev=b>0&&a[b-1]?a[b-1].string:""),c}function j(a,b){return a===b}function k(a){return a.split(/\s+/)}function l(){return arethusaUtil.inject({},a.tokens,o.collectTokenString)}function m(){d.setActive(o),o.focusStringSearch=!0}function n(){return arethusaUtil.inject([],d.all,function(a,b,c){c.canSearch&&a.push(c)})}var o=this;this.name="search",this.defaultConf={displayName:"selector",queryByRegex:!0},this.findByRegex=function(a){angular.forEach(o.greekRegex,function(b,c){var d=new RegExp(c,"g");a=a.replace(d,b)});var b=new RegExp(a,"i");return arethusaUtil.inject([],o.strings,function(a,c,d){c.match(b)&&arethusaUtil.pushAll(a,d)})},this.queryWordInContext=function(a,b,c){var d=f(a);if(d.length>1){angular.forEach(d,function(a){a.matchedPrefix=0,a.matchedSuffix=0;var d=a.includePrevious?a.includePrevious:a.includeNext?a.includeNext:a.id;a.matchedPrefix=g(d,b),a.matchedSuffix=h(d,c)});var e=0,i=0,j=[];angular.forEach(d,function(a){a.matchedPrefix>e&&a.matchedSuffix>i||a.matchedPrefix==e&&a.matchedSuffix>i||a.matchedPrefix>e&&a.matchedSuffix==i?(e=a.matchedPrefix,i=a.matchedSuffix,j=[a]):a.matchedPrefix==e&&a.matchedSuffix==i&&j.push(a)})}else j=d;var k=[];return angular.forEach(j,function(a){k.push(a.id),a.includePrevious&&k.push(a.includePrevious),a.includeNext&&k.push(a.includeNext)}),k},this.compareWordsWithContext=function(a,b,c,d){var e=j(a,d),f=0;if(!e&&c&&c.match(/^-/)&&(e=j(a+c.replace(/^-/,""),d))&&(f=1),e||(b&&b.match(/-$/)?e=j(b.replace(/-$/,"")+a,d):b&&b.match(/^-/)&&(e=j(a+b.replace(/^-/,""),d)),e&&(f=-1)),!e&&(a.match(/^-/)||a.match(/-$/))){a=a.match(/^-/)?a.replace(/^-/,""):a.replace(/-$/,""),b&&(e=j(b+a,d),e||(e=j(a+b,d)),e&&(f=-1)),!e&&c&&(e=j(a+c,d),e||(e=j(c+a,d)),e&&(f=1))}return{match:e,combine:f}},this.queryTokens=function(){if(""===o.tokenQuery)return void a.deselectAll();var b=o.tokenQuery.split(" "),c=arethusaUtil.inject([],b,function(a,b){var c=o.queryByRegex?o.findByRegex(b):o.strings[b];arethusaUtil.pushAll(a,c)});a.multiSelect(c)},this.collectTokenString=function(a,b,c){var d=c.string;a[d]||(a[d]=[]),a[d].push(b)},this.removeTokenFromIndex=function(a,b){var c=o.strings[b];c.splice(c.indexOf(a),1),0===c.length&&delete o.strings[b]},a.on("tokenAdded",function(a,b){o.collectTokenString(o.strings,b.id,b)}),a.on("tokenRemoved",function(a,b){o.removeTokenFromIndex(b.id,b.string)}),c.initCaptures(function(a){return{search:[a.create("focus",m,"A")]}}),this.init=function(){e(),o.searchPlugins=n(),o.strings=l(),o.tokenQuery=""}}]),angular.module("arethusa.search").run(["$templateCache",function(a){a.put("js/arethusa.search/templates/search_by_string.html",'<div class="row">\n  <div class="small-12 columns">\n    <label>\n      <span translate="search.searchByToken"/>\n      <div class="row collapse">\n        <div class="small-10 columns">\n          <input type="search"\n            foreign-keys\n            ng-change="search.queryTokens()"\n            ng-model="search.tokenQuery" />\n        </div>\n        <div class="small-2 columns">\n          <label class="postfix">\n            regex\n            <input\n              id="regex-checkbox"\n              type="checkbox"\n              ng-change="search.queryTokens()"\n              ng-model="search.queryByRegex"/>\n          </label>\n        </div>\n      </div>\n    </label>\n  </div>\n</div>\n')}]);
//# sourceMappingURL=arethusa.search.min.map