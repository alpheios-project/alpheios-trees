/*
 * Arethusa - a backend-independent client-side annotation framework
 * http://github.com/alpheios-project/arethusa
 *
 * Version 0.2.5
 * built from branch gardener_widget
 * at 97c2531e63e0da7bfdf7e0e6a99ce7f99a4525a3
 * on 2020-03-30T18:03:20.458Z
 *
 * Published under the MIT license
 */

"use strict";angular.module("arethusa.search",[]),angular.module("arethusa.search").directive("pluginSearch",function(){return{restrict:"AE",scope:!0,replace:!0,link:function(a,b,c){a.plugin=a.$eval(c.pluginSearch),a.template="js/arethusa."+a.plugin.name+"/templates/search.html"},template:'<div ng-include="template"></div>'}}),angular.module("arethusa.search").directive("searchByString",["search","state","sidepanel",function(a,b,c){return{restrict:"A",scope:{},link:function(d,e,f){function g(b,c){var e=d.$new();e.token=b,e.$watch("token.string",function(d,e){d!==e&&(a.removeTokenFromIndex(b.id,e),a.collectTokenString(a.strings,c,b))}),i[c]=e}function h(){angular.forEach(b.tokens,g)}d.search=a,d.state=b;var i={};d.$watch("state.tokens",function(a,b){h()});var j=e.find("input")[0],k=e.parents("#sidepanel")[0];d.$watch("search.focusStringSearch",function(b,d){b&&(k&&c.folded&&c.toggle(),j.focus(),a.focusStringSearch=!1)})},templateUrl:"js/arethusa.search/templates/search_by_string.html"}}]),angular.module("arethusa.search").service("search",["state","configurator","keyCapture","plugins",function(a,b,c,d){function e(){var a=["queryByRegex"];b.getConfAndDelegate(k),b.getStickyConf(k,a),k.focusStringSearch=!1,k.greekRegex=c.conf("regex").greek}function f(a,b){return a===b}function g(a){return a.split(/\s+/)}function h(){return arethusaUtil.inject({},a.tokens,k.collectTokenString)}function i(){d.setActive(k),k.focusStringSearch=!0}function j(){return arethusaUtil.inject([],d.all,function(a,b,c){c.canSearch&&a.push(c)})}var k=this;this.name="search",this.defaultConf={displayName:"selector",queryByRegex:!0},this.findByRegex=function(a){angular.forEach(k.greekRegex,function(b,c){var d=new RegExp(c,"g");a=a.replace(d,b)});var b=new RegExp(a,"i");return arethusaUtil.inject([],k.strings,function(a,c,d){c.match(b)&&arethusaUtil.pushAll(a,d)})},this.findWordInContext=function(b){return arethusaUtil.inject([],k.strings,function(c,d,e){var f=[];angular.forEach(e,function(c){var e=a.getPreviousTokens(c,1),g=a.getNextTokens(c,1),h=g.length>0?g[0].string:null,i=e.length>0?e[0].string:null,j=k.compareWordsWithContext(d,i,h,b.word);if(j.match){var l={id:c,matchedPrefix:0,matchedSuffix:0};j.combine<0?l.includePrevious=e[0].id:j.combine>0&&(l.includeNext=g[0].id),f.push(l)}}),f.length>1&&f.forEach(function(c){var d=c.includePrefix?c.includePrefix:c.includeSuffix?c.includeSuffix:c.id,e=g(b.prefix),f=g(b.suffix),h=0,i=0,j=[];if(e.length>0)for(var j=a.getPreviousTokens(d),l=j.length-1,m=e.length-1;m>=0;m--)if(j[l]){var n=j[l],o=j[l+1]?j[l+1].string:null,p=l>0&&j[l-1]?j[l-1].string:null,q=k.compareWordsWithContext(n.string,p,o,e[m]);q.match&&(l--,h++,l+=q.combine)}var r=[];if(f.length>0){r=a.getNextTokens(d);for(var l=0,m=0;m<f.length;m++)if(r[l]){var n=r[l],o=r[l+1]?r[l+1].string:null,p=l>0&&r[l-1]>0?r[l-1].string:null,s=k.compareWordsWithContext(n.string,p,o,f[m]);s.match&&(l++,i++,l-=s.combine)}}c.matchedPrefix=h,c.matchedSuffix=i});var h=0,i=0,j=[];f.forEach(function(a){a.matchedPrefix>h&&a.matchedSuffix>i||a.matchedPrefix>h&&a.matchedSuffix==i||a.matchedPrefix==h&&a.matchedSuffix>i?(h=a.matchedPrefix,i=a.matchedSuffix,j=[a]):a.matchedPrefix==h&&a.matchedSuffix==i&&j.push(a)}),j.forEach(function(a){c.push(a.id),a.includePrevious&&c.push(a.includePrevious),a.includeNext&&c.push(a.includeNext)})})},this.compareWordsWithContext=function(a,b,c,d){var e=f(a,d),g=0;if(!e&&c&&c.match(/^-/)&&(e=f(a+c.replace(/^-/,""),d))&&(g=1),e||(b&&b.match(/-$/)?e=f(b.replace(/-$/,"")+a,d):b&&b.match(/^-/)&&(e=f(a+b.replace(/^-/,""),d)),e&&(g=-1)),!e&&(a.match(/^-/)||a.match(/-$/))){a=a.match(/^-/)?a.replace(/^-/,""):a.replace(/-$/,""),b&&(e=f(b+a,d),e||(e=f(a+b,d)),e&&(g=-1)),!e&&c&&(e=f(a+c,d),e||(e=f(c+a,d)),e&&(g=1))}return{match:e,combine:g}},this.queryTokens=function(){if(""===k.tokenQuery)return void a.deselectAll();var b=k.tokenQuery.split(" "),c=arethusaUtil.inject([],b,function(a,b){var c=k.queryByRegex?k.findByRegex(b):k.strings[b];arethusaUtil.pushAll(a,c)});a.multiSelect(c)},this.queryWordInContext=function(a,b,c){var d=[{word:a,prefix:b,suffix:c}];return arethusaUtil.inject([],d,function(a,b){var c=k.findWordInContext(b);arethusaUtil.pushAll(a,c)})},this.collectTokenString=function(a,b,c){var d=c.string;a[d]||(a[d]=[]),a[d].push(b)},this.removeTokenFromIndex=function(a,b){var c=k.strings[b];c.splice(c.indexOf(a),1),0===c.length&&delete k.strings[b]},a.on("tokenAdded",function(a,b){k.collectTokenString(k.strings,b.id,b)}),a.on("tokenRemoved",function(a,b){k.removeTokenFromIndex(b.id,b.string)}),c.initCaptures(function(a){return{search:[a.create("focus",i,"A")]}}),this.init=function(){e(),k.searchPlugins=j(),k.strings=h(),k.tokenQuery=""}}]),angular.module("arethusa.search").run(["$templateCache",function(a){a.put("js/arethusa.search/templates/search_by_string.html",'<div class="row">\n  <div class="small-12 columns">\n    <label>\n      <span translate="search.searchByToken"/>\n      <div class="row collapse">\n        <div class="small-10 columns">\n          <input type="search"\n            foreign-keys\n            ng-change="search.queryTokens()"\n            ng-model="search.tokenQuery" />\n        </div>\n        <div class="small-2 columns">\n          <label class="postfix">\n            regex\n            <input\n              id="regex-checkbox"\n              type="checkbox"\n              ng-change="search.queryTokens()"\n              ng-model="search.queryByRegex"/>\n          </label>\n        </div>\n      </div>\n    </label>\n  </div>\n</div>\n')}]);
//# sourceMappingURL=arethusa.search.min.map